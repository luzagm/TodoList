{"version":3,"sources":["components/todo-form.tsx","components/todo-item.tsx","components/todo-list.tsx","components/TodoListApp.tsx","index.tsx"],"names":["TodoForm","props","inputRef","React","formState","setFormState","className","ref","type","placeholder","onChange","ev","target","value","onKeyPress","event","key","newTodo","id","shortid","generate","text","isCompleted","handleTodoCreate","current","handleInputEnter","TodoItem","onClick","handleTodoComplete","todo","handleTodoUpdate","handleTodoRemove","TodoList","todos","map","TodoListApp","useState","setTodos","newTodosState","push","find","currentTarget","filter","rootElement","document","getElementById","render"],"mappings":"oMAuCeA,EAnCE,SAACC,GAChB,IAAMC,EAAWC,SAA+B,MADH,EAEXA,WAAe,IAFJ,mBAEtCC,EAFsC,KAE3BC,EAF2B,KAsB7C,OACE,uBAAKC,UAAU,aACb,yBACEC,IAAKL,EACLM,KAAK,OACLC,YAAY,iBACZC,SAAU,SAAAC,GAvBdN,EAuBsCM,EAvBnBC,OAAOC,QAwBtBC,WAAY,SAAAH,GAAE,OArBpB,SAA0BI,GACxB,GAAkB,UAAdA,EAAMC,IAAiB,CACzB,IAAMC,EAAyB,CAC7BC,GAAIC,IAAQC,WACZC,KAAMjB,EACNkB,aAAa,GAEfrB,EAAMsB,iBAAiBN,GACrBf,GAAYA,EAASsB,UACvBtB,EAASsB,QAAQX,MAAQ,KAYLY,CAAiBd,QCV5Be,EAnBE,SAACzB,GACd,OACI,yBAAKK,UAAU,aACX,yBAAKqB,QAAS,kBAAI1B,EAAM2B,mBAAmB3B,EAAM4B,KAAKX,MACjDjB,EAAM4B,KAAKP,YAAe,0BAAMhB,UAAU,qBAAhB,UAAiD,0BAAMA,UAAU,yBAIhG,yBAAKA,UAAU,2BACX,2BACAO,MAAOZ,EAAM4B,KAAKR,KAClBX,SAAU,SAACK,GAAD,OAAgDd,EAAM6B,iBAAiBf,EAAOd,EAAM4B,KAAKX,QAGvG,yBAAKZ,UAAU,cAAcqB,QAAS,kBAAM1B,EAAM8B,iBAAiB9B,EAAM4B,KAAKX,MAA9E,YCKGc,EAlBE,SAAC/B,GAChB,OACE,yBAAKK,UAAU,aACb,4BACGL,EAAMgC,MAAMC,KAAI,SAACL,GAAD,OACjB,wBAAIb,IAAKa,EAAKX,IACZ,kBAAC,EAAD,CACAW,KAAMA,EACNC,iBAAkB7B,EAAM6B,iBACxBC,iBAAkB9B,EAAM8B,iBACxBH,mBAAoB3B,EAAM2B,4BCgCrBO,G,MAzCK,WAAO,IAAD,EACChC,IAAMiC,SAA0B,IADjC,mBACjBH,EADiB,KACXI,EADW,KA0BxB,OACE,yBAAK/B,UAAU,iBACb,wBAAIA,UAAU,mBAAd,cACA,kBAAC,EAAD,CACE2B,MAAOA,EACPV,iBA5BN,SAA0BM,GACxB,IAAMS,EAA8B,YAAOL,GAC3CK,EAAcC,KAAKV,GACnBQ,EAASC,MA0BP,kBAAC,EAAD,CACEL,MAAOA,EACPH,iBAzBN,SAA0BnB,EAAyCO,GACjE,IAAMoB,EAA8B,YAAOL,GAC3CK,EAAcE,MAAK,SAACX,GAAD,OAAyBA,EAAKX,KAAOA,KAAKG,KAAOV,EAAG8B,cAAc5B,MACrFwB,EAASC,IAuBLP,iBApBN,SAA0Bb,GACxB,IAAMoB,EAAiCL,EAAMS,QAAO,SAACb,GAAD,OAAyBA,EAAKX,KAAOA,KACzFmB,EAASC,IAmBLV,mBAhBN,SAA4BV,GAC1B,IAAMoB,EAA8B,YAAOL,GAC3CK,EAAcE,MAAK,SAACX,GAAD,OAAyBA,EAAKX,KAAOA,KAAKI,aAAegB,EAAcE,MAAK,SAACX,GAAD,OAAyBA,EAAKX,KAAOA,KAAKI,YACzIe,EAASC,SCzBPK,EAAcC,SAASC,eAAe,QAC5CC,iBAAO,kBAAC,EAAD,MAAiBH,I","file":"static/js/main.ace98e44.chunk.js","sourcesContent":["import * as React from 'react'\nimport shortid from 'shortid'\nimport {TodoInterface, TodoFormInterface} from './../interfaces'\n\nconst TodoForm = (props: TodoFormInterface) => {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const [formState, setFormState] = React.useState('')\n    \n  function handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setFormState(event.target.value)\n  }\n      \n  function handleInputEnter(event: React.KeyboardEvent) {\n    if (event.key === 'Enter') {\n      const newTodo: TodoInterface = {\n        id: shortid.generate(),\n        text: formState,\n        isCompleted: false\n      }\n      props.handleTodoCreate(newTodo)\n    if (inputRef && inputRef.current) {\n      inputRef.current.value = ''\n      }\n    }\n  }\n\n  return (\n    <div className=\"todo-form\">\n      <input\n        ref={inputRef}\n        type=\"text\"\n        placeholder='Enter new task'\n        onChange={ev => handleInputChange(ev)}\n        onKeyPress={ev => handleInputEnter(ev)}\n      />\n    </div>\n  )\n}\n\nexport default TodoForm","import React from 'react';\nimport { TodoItemInterface } from './../interfaces'\n\n\nconst TodoItem = (props: TodoItemInterface) => {\n    return (\n        <div className='todo-item'>\n            <div onClick={()=>props.handleTodoComplete(props.todo.id)}>\n                {props.todo.isCompleted ? (<span className=\"todo-item-checked\">✔</span>) : (<span className=\"todo-item-unchecked\"></span>\n                )}\n            </div>\n\n            <div className=\"todo-item-input-wrapper\">\n                <input\n                value={props.todo.text}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => props.handleTodoUpdate(event, props.todo.id)}/>\n            </div>\n\n            <div className=\"item-remove\" onClick={() => props.handleTodoRemove(props.todo.id)}>✗</div>\n        </div>\n    )\n}\n\nexport default TodoItem","import React from 'react';\nimport TodoItem from './todo-item';\nimport { TodoListInterface } from './../interfaces';\n\n\nconst TodoList = (props: TodoListInterface) => {\n  return (\n    <div className=\"todo-list\">\n      <ul>\n        {props.todos.map((todo)=>(\n        <li key={todo.id}>\n          <TodoItem\n          todo={todo}\n          handleTodoUpdate={props.handleTodoUpdate}\n          handleTodoRemove={props.handleTodoRemove}\n          handleTodoComplete={props.handleTodoComplete}\n          />\n        </li>))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TodoList\n","import React from 'react';\nimport TodoForm from './todo-form'\nimport TodoList from './todo-list'\nimport { TodoInterface } from '../interfaces'\nimport '../styles/styles.css'\n\nconst TodoListApp = () => {\n  const [todos,setTodos] = React.useState<TodoInterface[]>([])\n\n  function handleTodoCreate(todo: TodoInterface) {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.push(todo)\n    setTodos(newTodosState)\n  }\n    \n  function handleTodoUpdate(ev: React.ChangeEvent<HTMLInputElement>, id: string) {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text = ev.currentTarget.value\n    setTodos(newTodosState)\n  }\n\n  function handleTodoRemove(id: string) {\n    const newTodosState: TodoInterface[] = todos.filter((todo: TodoInterface) => todo.id !== id)\n    setTodos(newTodosState)\n  }\n\n  function handleTodoComplete(id: string) {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted = !newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\n    setTodos(newTodosState)\n  }\n\n  return (\n    <div className=\"todo-list-app\">\n      <h1 className=\"todo-list-title\">To do list</h1>\n      <TodoForm\n        todos={todos}\n        handleTodoCreate={handleTodoCreate}/>\n      <TodoList\n        todos={todos}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}/>\n    </div>\n  )\n}\n\nexport default TodoListApp","import React from 'react';\nimport { render } from 'react-dom'\nimport TodoListApp from './components/TodoListApp'\n\nconst rootElement = document.getElementById('root')\nrender(<TodoListApp />, rootElement)\n\n"],"sourceRoot":""}